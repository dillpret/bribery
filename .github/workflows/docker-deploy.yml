name: Deploy to Oracle Cloud

on:
  push:
    branches: [ master ]
  workflow_dispatch:

# Global permissions for all jobs
permissions:
  contents: read
  packages: write

jobs:
  test:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install using the test-specific requirements for running tests
          python -m pip install -r requirements-test.txt
          python -m pip install -r requirements-dev.txt
          
      - name: Run unit tests
        run: |
          python -m pytest tests/unit/ -v

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Changed from 'read' to 'write' to allow creating and pushing tags
      packages: write  # This is needed for pushing to the container registry
    steps:
      - uses: actions/checkout@v3
      
      # Note: We don't need to set up Python here as Docker uses its own Python environment
      
      - name: Read current version
        id: current_version
        run: echo "VERSION=$(cat VERSION)" >> $GITHUB_OUTPUT
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:v${{ steps.current_version.outputs.VERSION }}
          # Add build arguments for better diagnostics
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          # Better caching for faster builds
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Create and push Git tag
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git tag -a "v${{ steps.current_version.outputs.VERSION }}" -m "Release version ${{ steps.current_version.outputs.VERSION }}"
          git push origin "v${{ steps.current_version.outputs.VERSION }}"
          
      - name: Debug and Deploy to Oracle Cloud
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.ORACLE_HOST_IP }}
          username: ${{ secrets.ORACLE_USERNAME }}
          key: ${{ secrets.ORACLE_SSH_PRIVATE_KEY }}
          script: |
            echo "=== STARTING DIAGNOSTIC PROCESS ==="
            
            # Check for any processes using port 80
            echo "Checking processes using port 80..."
            sudo lsof -i :80 || echo "No process found using lsof"
            sudo ss -tulpn | grep :80 || echo "No process found using ss"
            
            # Check Docker status
            echo "Checking Docker status..."
            docker ps -a
            
            # Stop and remove any existing container
            echo "Stopping any existing containers..."
            docker stop bribery-game || true
            docker rm bribery-game || true
            
            # Check Nginx status and configuration
            echo "Checking Nginx status..."
            sudo systemctl status nginx || true
            
            echo "Checking Nginx configuration directories..."
            ls -la /etc/nginx/
            ls -la /etc/nginx/sites-enabled/ || true
            ls -la /etc/nginx/sites-available/ || true
            ls -la /etc/nginx/conf.d/ || true
            
            # Complete Nginx configuration dump
            echo "Full Nginx configuration dump..."
            sudo nginx -T || echo "Failed to dump Nginx configuration"
            
            # Radical approach: Remove Nginx completely and reinstall
            echo "Completely removing Nginx..."
            sudo systemctl stop nginx
            sudo apt-get remove --purge nginx nginx-common nginx-full -y
            sudo apt-get autoremove -y
            sudo rm -rf /etc/nginx/
            
            echo "Reinstalling Nginx..."
            sudo apt-get update
            sudo apt-get install -y nginx
            
            # Pull the latest image
            echo "Pulling Docker image..."
            docker pull ghcr.io/${{ github.repository }}:latest
            
            # Run the new container on port 8080 (internal)
            echo "Starting Docker container on port 8080..."
            docker run -d --name bribery-game \
              -p 8080:5000 \
              --restart unless-stopped \
              ghcr.io/${{ github.repository }}:latest
            
            # Create a very simple Nginx configuration
            echo "Creating minimal Nginx configuration..."
            sudo mkdir -p /etc/nginx/sites-available/
            sudo mkdir -p /etc/nginx/sites-enabled/
            
            sudo tee /etc/nginx/sites-available/bribery-game > /dev/null << 'EOL'
            server {
                listen 80 default_server;
                listen [::]:80 default_server;
                
                server_name _;
                
                location / {
                    proxy_pass http://127.0.0.1:8080;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection "upgrade";
                    proxy_set_header Host $host;
                }
            }
            EOL
            
            # Create minimal nginx.conf
            sudo tee /etc/nginx/nginx.conf > /dev/null << 'EOL'
            user www-data;
            worker_processes auto;
            pid /run/nginx.pid;
            include /etc/nginx/modules-enabled/*.conf;
            
            events {
                worker_connections 768;
            }
            
            http {
                sendfile on;
                tcp_nopush on;
                tcp_nodelay on;
                keepalive_timeout 65;
                types_hash_max_size 2048;
                
                include /etc/nginx/mime.types;
                default_type application/octet-stream;
                
                ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
                ssl_prefer_server_ciphers on;
                
                access_log /var/log/nginx/access.log;
                error_log /var/log/nginx/error.log;
                
                include /etc/nginx/sites-enabled/*;
            }
            EOL
            
            # Enable our site
            sudo ln -sf /etc/nginx/sites-available/bribery-game /etc/nginx/sites-enabled/
            
            # Test the configuration
            echo "Testing Nginx configuration..."
            sudo nginx -t
            
            # Start Nginx
            echo "Starting Nginx..."
            sudo systemctl start nginx
            
            # Verify everything is running
            echo "Verifying services..."
            docker ps
            sudo systemctl status nginx
            
            # Test local connectivity
            echo "Testing local connectivity..."
            curl -v http://localhost:8080 || echo "Failed to connect to Docker container"
            curl -v http://localhost || echo "Failed to connect through Nginx"
            
            # Check logs
            echo "Checking Docker logs..."
            docker logs bribery-game
            
            echo "Checking Nginx error log..."
            sudo tail -n 20 /var/log/nginx/error.log
            
            echo "=== DIAGNOSTIC PROCESS COMPLETE ==="
            
            # Clean up unused images
            docker image prune -f
