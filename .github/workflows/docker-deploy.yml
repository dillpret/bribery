name: Deploy to Oracle Cloud

on:
  push:
    branches: [ master ]
  workflow_dispatch:

# Global permissions for all jobs
permissions:
  contents: read
  packages: write

jobs:
  test:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install using the test-specific requirements for running tests
          python -m pip install -r requirements-test.txt
          python -m pip install -r requirements-dev.txt
          
      - name: Run unit tests
        run: |
          python -m pytest tests/unit/ -v

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Changed from 'read' to 'write' to allow creating and pushing tags
      packages: write  # This is needed for pushing to the container registry
    steps:
      - uses: actions/checkout@v3
      
      # Note: We don't need to set up Python here as Docker uses its own Python environment
      
      - name: Read current version
        id: current_version
        run: echo "VERSION=$(cat VERSION)" >> $GITHUB_OUTPUT
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:v${{ steps.current_version.outputs.VERSION }}
          # Add build arguments for better diagnostics
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          # Better caching for faster builds
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Create and push Git tag
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git tag -a "v${{ steps.current_version.outputs.VERSION }}" -m "Release version ${{ steps.current_version.outputs.VERSION }}"
          git push origin "v${{ steps.current_version.outputs.VERSION }}"
          
      - name: Deploy to Oracle Cloud
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.ORACLE_HOST_IP }}
          username: ${{ secrets.ORACLE_USERNAME }}
          key: ${{ secrets.ORACLE_SSH_PRIVATE_KEY }}
          script: |
            # Ensure Nginx is installed
            if ! command -v nginx &> /dev/null; then
              echo "Installing Nginx..."
              sudo apt-get update
              sudo apt-get install -y nginx
            fi
            
            # Pull the latest image
            docker pull ghcr.io/${{ github.repository }}:latest
            
            # Stop and remove the existing container if it exists
            docker stop bribery-game || true
            docker rm bribery-game || true
            
            # Run the new container on port 8080 (internal) with explicit networking
            echo "Starting Docker container with proper port configuration..."
            docker run -d --name bribery-game \
              -p 8080:5000 \
              --restart unless-stopped \
              ghcr.io/${{ github.repository }}:latest
              
            # Fix iptables rules comprehensively
            echo "Setting up firewall rules correctly..."
            
            # 1. Check and fix raw table DROP rule
            echo "Checking raw table for problematic rules..."
            RAW_RULES=$(sudo iptables-save -t raw)
            if echo "$RAW_RULES" | grep -q "172.17.0"; then
              echo "Found problematic rule in raw table, removing..."
              sudo iptables -t raw -D PREROUTING -d 172.17.0.0/16 ! -i docker0 -j DROP 2>/dev/null || true
              sudo iptables -t raw -D PREROUTING -d 172.17.0.2/32 ! -i docker0 -j DROP 2>/dev/null || true
            fi
            
            # 2. Allow HTTP and Docker ports in INPUT chain
            echo "Configuring INPUT chain to allow web traffic..."
            # Check if port 80 is already allowed
            INPUT_RULES=$(sudo iptables -L INPUT --line-numbers)
            if ! echo "$INPUT_RULES" | grep -q "dpt:http"; then
              echo "Adding rule to allow HTTP traffic..."
              sudo iptables -I INPUT 4 -p tcp --dport 80 -j ACCEPT || true
            fi
            
            # Allow Docker ports
            echo "Allowing Docker ports..."
            sudo iptables -I INPUT 5 -p tcp --dport 8080 -j ACCEPT 2>/dev/null || true
            sudo iptables -I INPUT 5 -p tcp --dport 5000 -j ACCEPT 2>/dev/null || true
            
            # 3. Fix Docker chain rules
            echo "Fixing Docker chain rules..."
            # Remove any blanket DROP rules in Docker chain
            DOCKER_RULES=$(sudo iptables -L DOCKER --line-numbers)
            echo "Current DOCKER chain rules:"
            echo "$DOCKER_RULES"
            
            if echo "$DOCKER_RULES" | grep -q "DROP"; then
              # Find and remove DROP rules
              DROP_LINES=$(echo "$DOCKER_RULES" | grep -n "DROP" | cut -d: -f1)
              for line in $DROP_LINES; do
                echo "Removing DROP rule at line $line..."
                sudo iptables -D DOCKER $line 2>/dev/null || true
              done
            fi
            
            # Add proper ACCEPT rules
            echo "Adding proper ACCEPT rules for container..."
            CONTAINER_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' bribery-game)
            sudo iptables -I DOCKER -p tcp -d $CONTAINER_IP --dport 5000 -j ACCEPT 2>/dev/null || true
            sudo iptables -I DOCKER -p tcp -d 172.17.0.0/16 --dport 5000 -j ACCEPT 2>/dev/null || true
            sudo iptables -I DOCKER -p tcp -d 172.17.0.0/16 --dport 8080 -j ACCEPT 2>/dev/null || true
            
            # 4. Make rules persistent
            echo "Making iptables rules persistent..."
            sudo apt-get update
            sudo apt-get install -y iptables-persistent
            sudo netfilter-persistent save
            
            # Configure Nginx directly in the main configuration
            # This approach is most reliable as it doesn't depend on includes
            echo "Creating direct Nginx configuration..."
            sudo tee /etc/nginx/nginx.conf > /dev/null << 'EOL'
            user www-data;
            worker_processes auto;
            pid /run/nginx.pid;
            
            events {
                worker_connections 768;
            }
            
            http {
                sendfile on;
                tcp_nopush on;
                tcp_nodelay on;
                keepalive_timeout 65;
                types_hash_max_size 2048;
                
                include /etc/nginx/mime.types;
                default_type application/octet-stream;
                
                access_log /var/log/nginx/access.log;
                error_log /var/log/nginx/error.log;
                
                # Direct server definition in main config
                server {
                    listen 80 default_server;
                    listen [::]:80 default_server;
                    
                    # CloudFlare support
                    keepalive_timeout 75s;
                    
                    location / {
                        proxy_pass http://127.0.0.1:8080;
                        proxy_http_version 1.1;
                        proxy_set_header Upgrade $http_upgrade;
                        proxy_set_header Connection "upgrade";
                        proxy_set_header Host $host;
                        proxy_set_header X-Real-IP $remote_addr;
                        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                        proxy_set_header X-Forwarded-Proto $scheme;
                        
                        # Increased timeouts for Cloudflare
                        proxy_read_timeout 300s;
                        proxy_connect_timeout 75s;
                        proxy_send_timeout 75s;
                    }
                }
            }
            EOL
            
            # Restart Nginx to apply changes
            sudo systemctl restart nginx
            
            # Verify configuration
            echo "Verifying Nginx configuration..."
            sudo nginx -t
            
            # Test access to make sure the proxy works
            echo "Testing access to application..."
            curl -s http://localhost | head -n 10
            
            # Clean up unused images
            docker image prune -f
            
            # Create a very simple Nginx configuration
            echo "Creating minimal Nginx configuration..."
            sudo mkdir -p /etc/nginx/sites-available/
            sudo mkdir -p /etc/nginx/sites-enabled/
            
            sudo tee /etc/nginx/sites-available/bribery-game > /dev/null << 'EOL'
            server {
                listen 80 default_server;
                listen [::]:80 default_server;
                
                server_name _;
                
                # Add Cloudflare-specific headers and configuration
                add_header X-Server-Status "OK";
                add_header X-Debug-Info "Bribery Game Server";
                
                # Increased timeouts for Cloudflare
                keepalive_timeout 75s;
                
                location / {
                    proxy_pass http://127.0.0.1:8080;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection "upgrade";
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                    
                    # Increased timeouts for Cloudflare
                    proxy_read_timeout 300s;
                    proxy_connect_timeout 75s;
                    proxy_send_timeout 75s;
                }
            }
            EOL
            
            # Create minimal nginx.conf
            sudo tee /etc/nginx/nginx.conf > /dev/null << 'EOL'
            user www-data;
            worker_processes auto;
            pid /run/nginx.pid;
            include /etc/nginx/modules-enabled/*.conf;
            
            events {
                worker_connections 768;
            }
            
            http {
                sendfile on;
                tcp_nopush on;
                tcp_nodelay on;
                keepalive_timeout 65;
                types_hash_max_size 2048;
                
                include /etc/nginx/mime.types;
                default_type application/octet-stream;
                
                ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
                ssl_prefer_server_ciphers on;
                
                access_log /var/log/nginx/access.log;
                error_log /var/log/nginx/error.log;
                
                # Only include our sites-enabled directory, not conf.d
                include /etc/nginx/sites-enabled/*;
            }
            EOL
            
            # Make sure all other default configs are removed
            sudo rm -f /etc/nginx/sites-enabled/default
            sudo rm -f /etc/nginx/conf.d/default.conf
            
            # Ensure our sites-enabled directory exists
            sudo mkdir -p /etc/nginx/sites-enabled/
            
            # Disable welcome page by creating single site config
            sudo tee /etc/nginx/sites-available/bribery-game > /dev/null << 'EOL'
            server {
                listen 80 default_server;
                listen [::]:80 default_server;
                
                server_name _;
                
                # Root location explicitly defined to avoid default welcome page
                location = / {
                    proxy_pass http://127.0.0.1:8080/;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection "upgrade";
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                }
                
                # All other locations
                location / {
                    proxy_pass http://127.0.0.1:8080;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection "upgrade";
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                    
                    # Increased timeouts for Cloudflare
                    proxy_read_timeout 300s;
                    proxy_connect_timeout 75s;
                    proxy_send_timeout 75s;
                }
            }
            EOL
